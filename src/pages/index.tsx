import { useMemo } from 'react';

import Head from 'next/head';
import { GetStaticProps } from 'next';

import nodeFetch from 'node-fetch';
import { createApi } from 'unsplash-js';
import lqip from 'lqip-modern';

import { Tab } from '@headlessui/react';
import classNames from 'classnames';

import { Photo } from '@/types';

import { Header } from '@/components/Header';
import { Gallery } from '@/components/Gallery';
import { Footer } from '@/components/Footer';


type CreateApi = ReturnType<typeof createApi>;
type SearchPhotos = CreateApi['search'];
type GetPhotos = SearchPhotos['getPhotos'];
type PhotoResponse = Awaited<ReturnType<GetPhotos>>;

type HomeProps = {
  italy: Photo[];
  argentina: Photo[]
}

const tabs = [
  {
    key: 'all',
    display: 'All'
  },
  {
    key: 'italy',
    display: 'Italy'
  },
  {
    key: 'argentina',
    display: 'Argentina'
  },
]

export const getStaticProps: GetStaticProps<HomeProps> = async () => {

  const unsplash = createApi({
    accessKey: process.env.UNSPLASH_ACCESS_KEY!,
    fetch: nodeFetch as unknown as typeof fetch,
  });

  const italyPhotos = await getPhotos(unsplash, 'italy')
  const argentinaPhotos = await getPhotos(unsplash, 'argentina')

  return {
    props: {
      italy: italyPhotos,
      argentina: argentinaPhotos
    },
  };
}

export default function Home({ italy, argentina }: HomeProps) {

  // const allPhotos = useMemo(() => {
  //   const all = [...oceans, ...forests];

  //   return all.sort((a, b) => b.likes - a.likes);
  // }, [oceans, forests]);

  return (
    <>
      <Head>
        <title>PhotoExample</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main>
        <Header />
        <section className='w-full flex justify-center h-auto'>
          <article className='w-4/5 flex flex-col items-center'>

            <Tab.Group>
              <Tab.List className='flex justify-center items-center gap-10 py-5'>

                {tabs.map(tab => (
                  <Tab key={tab.key} className='p-2'>
                    {({ selected }) => (
                      <span className={classNames(
                        'uppercase text-lg',
                        selected ? 'text-white' : 'text-stone-600'
                      )}>
                        {tab.display}
                      </span>
                    )}
                  </Tab>
                ))}
              </Tab.List>
              <Tab.Panels className='bg-stone-900 bg-opacity-80 h-full max-w-[1000px] w-full p-2 sm:p-4'>
                <Tab.Panel>
                  <Gallery photos={italy}></Gallery>
                </Tab.Panel>
                <Tab.Panel>
                  <Gallery photos={italy} />
                </Tab.Panel>
                <Tab.Panel>
                  <Gallery photos={argentina}></Gallery>
                </Tab.Panel>
              </Tab.Panels>
            </Tab.Group>

          </article>
        </section >
        <Footer />
      </main>
    </>
  );
}


async function getPhotos(clientInstance: ReturnType<typeof createApi>, query: string): Promise<Photo[]> {

  const photosResults: Photo[] = [];

  const responseApi = await clientInstance.search.getPhotos({
    query
  })

  if (responseApi.type != 'success') return photosResults

  const { results } = responseApi.response;

  const mappedPhotos = results.map((photo, index) => ({
    src: photo.urls.full,
    thumb: photo.urls.thumb,
    width: photo.width,
    height: photo.height,
    alt: photo.alt_description ?? `italy-img-${index}`,
    likes: photo.likes ?? 0,
  }))

  const photosArrWithDataUrl: Photo[] = [];

  for (const photo of mappedPhotos) {
    const blurDataURL = await getDataUrl(photo.src)
    photosArrWithDataUrl.push({ ...photo, blurDataURL })
  }

  photosResults.push(...photosArrWithDataUrl)

  return photosResults
}

async function getDataUrl(url: string) {
  const imgData = await fetch(url)

  const arrayBufferData = await imgData.arrayBuffer()
  const lqipData = await lqip(Buffer.from(arrayBufferData))

  return lqipData.metadata.dataURIBase64
}