import { useMemo } from 'react';

import Head from 'next/head';
import { GetStaticProps } from 'next';

import nodeFetch from 'node-fetch';
import { createApi } from 'unsplash-js';

import { Tab } from '@headlessui/react';
import classNames from 'classnames';

import { Photo } from '@/types';

import { Header } from '@/components/Header';
import { Gallery } from '@/components/Gallery';
import { Footer } from '@/components/Footer';


type CreateApi = ReturnType<typeof createApi>;
type SearchPhotos = CreateApi['search'];
type GetPhotos = SearchPhotos['getPhotos'];
type PhotoResponse = Awaited<ReturnType<GetPhotos>>;

type HomeProps = {
  italy: Photo[];
  argentina: Photo[]
}

const tabs = [
  {
    key: 'all',
    display: 'All'
  },
  {
    key: 'italy',
    display: 'Italy'
  },
  {
    key: 'argentina',
    display: 'Argentina'
  },
]

export const getStaticProps: GetStaticProps<HomeProps> = async () => {

  const unsplash = createApi({
    accessKey: process.env.UNSPLASH_ACCESS_KEY!,
    fetch: nodeFetch as unknown as typeof fetch,
  });

  const italy = await unsplash.search.getPhotos({
    query: 'italy',
  })

  const argentina = await unsplash.search.getPhotos({
    query: 'argentina',
  })

  const italyResults: Photo[] = [];

  if (italy.type === 'success') {
    const { results } = italy.response;
    const mappedItaly = results.map((image, index) => ({
      src: image.urls.full,
      thumb: image.urls.thumb,
      width: image.width,
      height: image.height,
      alt: image.alt_description ?? `italy-img-${index}`,
      blurDataURL: image.blur_hash ?? '',
      likes: image.likes ?? 0,
    }))
    italyResults.push(...mappedItaly)
  } else {
    console.error('could not get Italy photos')
  }

  const argentinaResults: Photo[] = [];

  if (argentina.type === 'success') {
    const { results } = argentina.response;
    const mappedArgentina = results.map((image, index) => ({
      src: image.urls.full,
      thumb: image.urls.thumb,
      width: image.width,
      height: image.height,
      alt: image.alt_description ?? `argentina-img-${index}`,
      blurDataURL: image.blur_hash ?? '',
      likes: image.likes ?? 0,
    }))
    argentinaResults.push(...mappedArgentina)
  } else {
    console.error('could not get Argentina photos')
  }

  return {
    props: {
      italy: italyResults,
      argentina: argentinaResults
    },
  };
}

export default function Home({ italy, argentina }: HomeProps) {

  // const allPhotos = useMemo(() => {
  //   const all = [...oceans, ...forests];

  //   return all.sort((a, b) => b.likes - a.likes);
  // }, [oceans, forests]);

  return (
    <>
      <Head>
        <title>PhotoExample</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main>
        <Header />
        <section className='w-full flex justify-center h-auto'>
          <article className='w-4/5 flex flex-col items-center'>

            <Tab.Group>
              <Tab.List className='flex justify-center items-center gap-10 py-5'>

                {tabs.map(tab => (
                  <Tab key={tab.key} className='p-2'>
                    {({ selected }) => (
                      <span className={classNames(
                        'uppercase text-lg',
                        selected ? 'text-white' : 'text-stone-600'
                      )}>
                        {tab.display}
                      </span>
                    )}
                  </Tab>
                ))}
              </Tab.List>
              <Tab.Panels className='bg-stone-900 bg-opacity-80 h-full max-w-[1000px] w-full p-2 sm:p-4'>
                <Tab.Panel>
                  <Gallery photos={italy}></Gallery>
                </Tab.Panel>
                <Tab.Panel>
                  <Gallery photos={italy} />
                </Tab.Panel>
                <Tab.Panel>
                  <Gallery photos={argentina}></Gallery>
                </Tab.Panel>
              </Tab.Panels>
            </Tab.Group>

          </article>
        </section >
        <Footer />
      </main>
    </>
  );
}
